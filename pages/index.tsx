import type { NextPage } from 'next'
import Head from 'next/head'
import { useEffect, useState } from 'react'

import { formatUnits } from '@ethersproject/units'
import Select from 'react-select'
import { $enum } from 'ts-enum-util'

import { ChainId } from '@/constants/chains'
import { ZERO_BN } from '@/constants/util'
import Web3ConnectionProvider, { useWeb3Connection } from '@/utils/web3Connection'

const vbAddress = '0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B'

const Home: NextPage = () => {
  const {
    address,
    appChainId,
    connectWallet,
    disconnectWallet,
    isAppConnected,
    isWalletConnected,
    pushNetwork,
    readOnlyAppProvider,
    setAppChainId,
    wallet,
    web3Provider,
  } = useWeb3Connection()

  const chainOptions = $enum(ChainId).map((value, key) => ({
    value,
    label: key,
  }))

  const [balance, setBalance] = useState<{ name: string; balance: string } | undefined>()

  useEffect(() => {
    async function getBalance() {
      if (isAppConnected) {
        const res = (await web3Provider?.getBalance(address!)) || ZERO_BN
        if (isAppConnected) {
          setBalance({
            name: 'your balance',
            balance: formatUnits(res || ZERO_BN),
          })
        }
      } else {
        const res = await readOnlyAppProvider?.getBalance(vbAddress)
        if (!isAppConnected) {
          setBalance({ name: 'Vitalik balance', balance: formatUnits(res || ZERO_BN) })
        }
      }
    }

    if (!isWalletConnected && !readOnlyAppProvider) {
      setBalance(undefined)
    } else {
      getBalance()
    }
  }, [isAppConnected, isWalletConnected, readOnlyAppProvider, web3Provider, address])

  return (
    <div>
      <Head>
        <title>Create web3 Next App</title>
        <meta content="Generated by create next app" name="description" />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main>
        <h2>Welcome to Bootnode-web3-Next.js!</h2>

        <p>
          Get started by editing <code>pages/index.js</code>
        </p>

        <div>
          <div>
            <h2>App Network</h2>
            <Select
              defaultValue={chainOptions[0]}
              onChange={(option) => setAppChainId(option?.value || 1)}
              options={chainOptions}
            />
            isAppConnected: {isAppConnected ? 'yes' : 'no'}
            <br />
            App chainId: {appChainId}
            {isWalletConnected && !isAppConnected && (
              <button onClick={pushNetwork}>Switch Network</button>
            )}
            <div>
              {balance?.name}: {balance?.balance}
            </div>
          </div>

          <div>
            <h2>Wallet Connect</h2>
            {isWalletConnected ? (
              <div>
                <div>
                  <button onClick={disconnectWallet}>Disconnect</button>
                </div>
                <div>Connected to: {wallet?.name}</div>
                <div>{address}</div>
              </div>
            ) : (
              <button onClick={connectWallet}>Connect</button>
            )}
          </div>
        </div>
      </main>
    </div>
  )
}

export default function App() {
  return (
    <Web3ConnectionProvider>
      <Home />
    </Web3ConnectionProvider>
  )
}
